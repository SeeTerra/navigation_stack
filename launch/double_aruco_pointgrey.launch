<launch>

  <!-- namespace for camera input (aruco_detect) -->
  <arg name="camera_1" default="/camera_1"/>
	<arg name="camera_2" default="/camera_2"/>
  <arg name="image" default="image_mono"/>
  <arg name="transport" default="compressed"/>
  <arg name="fiducial_len" default="0.138684"/>
  <arg name="dictionary" default="10"/> <!--10 for 6x6, 16 for original-->
  <arg name="do_pose_estimation" default="true"/>
  <arg name="ignore_fiducials" default=""/>
  <arg name="fiducial_len_override" default="" />

  <node pkg="aruco_detect" name="aruco_detect_1"
    type="aruco_detect" output="screen" respawn="false">
    <param name="image_transport" value="$(arg transport)"/>
    <param name="publish_images" value="true" />
    <param name="fiducial_len" value="$(arg fiducial_len)"/>
    <param name="dictionary" value="$(arg dictionary)"/>
    <param name="do_pose_estimation" value="$(arg do_pose_estimation)"/>
    <param name="ignore_fiducials" value="$(arg ignore_fiducials)"/>
    <param name="fiducial_len_override" value="$(arg fiducial_len_override)"/>
    <remap from="/camera/compressed"
        to="$(arg camera_1)/$(arg image)/$(arg transport)"/>
    <remap from="/camera_info" to="$(arg camera_1)/camera_info"/>
		<remap from="fiducial_images" to="$(arg camera_1)/fiducial_images"/>
		<remap from="fiducial_transforms" to="$(arg camera_1)/fiducial_transforms"/>
  </node>

	<node pkg="aruco_detect" name="aruco_detect_2"
    type="aruco_detect" output="screen" respawn="false">
    <param name="image_transport" value="$(arg transport)"/>
    <param name="publish_images" value="true" />
    <param name="fiducial_len" value="$(arg fiducial_len)"/>
    <param name="dictionary" value="$(arg dictionary)"/>
    <param name="do_pose_estimation" value="$(arg do_pose_estimation)"/>
    <param name="ignore_fiducials" value="$(arg ignore_fiducials)"/>
    <param name="fiducial_len_override" value="$(arg fiducial_len_override)"/>
    <remap from="/camera/compressed"
        to="$(arg camera_2)/$(arg image)/$(arg transport)"/>
    <remap from="/camera_info" to="$(arg camera_2)/camera_info"/>
		<remap from="fiducial_images" to="$(arg camera_2)/fiducial_images"/>
		<remap from="fiducial_transforms" to="$(arg camera_2)/fiducial_transforms"/>
  </node>

  <!-- Determine this using rosrun pointgrey_camera_driver list_cameras.
      If not specified, defaults to first camera found. -->
 <arg name="calibrated" default="0"/>

 <group ns="camera_1">
   <node pkg="nodelet" type="nodelet" name="camera_nodelet_manager" args="manager" />

   <node pkg="nodelet" type="nodelet" name="camera_nodelet"
         args="load pointgrey_camera_driver/PointGreyCameraNodelet camera_nodelet_manager" >
     <param name="frame_id" value="camera" />
     <param name="serial" value="14432839" />
     <!-- When unspecified, the driver will use the default framerate as given by the
          camera itself. Use this parameter to override that value for cameras capable of
          other framerates. -->
     <param name="frame_rate" value="50" />
     <!-- Use the camera_calibration package to create this file -->
     <param name="camera_info_url" if="$(arg calibrated)"
            value="file://$(env HOME)/.ros/camera_info/camera_1.yaml" />
   </node>

   <node pkg="nodelet" type="nodelet" name="image_proc_debayer"
         args="load image_proc/debayer camera_nodelet_manager">
   </node>
 </group>

 <group ns="camera_2">
   <node pkg="nodelet" type="nodelet" name="camera_nodelet_manager" args="manager" />

   <node pkg="nodelet" type="nodelet" name="camera_nodelet"
         args="load pointgrey_camera_driver/PointGreyCameraNodelet camera_nodelet_manager" >
     <param name="frame_id" value="camera" />
     <param name="serial" value="14432831" />
     <!-- When unspecified, the driver will use the default framerate as given by the
          camera itself. Use this parameter to override that value for cameras capable of
          other framerates. -->
     <param name="frame_rate" value="50" />
     <!-- Use the camera_calibration package to create this file -->
     <param name="camera_info_url" if="$(arg calibrated)"
            value="file://$(env HOME)/.ros/camera_info/camera_2.yaml" />
   </node>
   <node pkg="nodelet" type="nodelet" name="image_proc_debayer"
         args="load image_proc/debayer camera_nodelet_manager">
   </node>
 </group>

</launch>
